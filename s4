Skill-4:
Aim: Interfacing sensors and actuators with Raspberry PI
Skills/Competencies Acquired:
Raspberry Pi
Reading data from analog and digital sensors
Understanding GPIO pin configurations for sensors and actuators
Using Python libraries for interfacing with sensors and actuators
Writing Python scripts for real-time data acquisition and control
Purpose of this Skill:
This skill enables users to interface various sensors and actuators with a Raspberry Pi to develop real-world applications such as automation, robotics, and IoT-based systems. By mastering these interfaces, users can build projects involving environmental monitoring, motor control, and home automation.

Steps Performed in this Skill:

1. Interfacing a Temperature and Humidity Sensor (DHT11/DHT22) with Raspberry Pi:
Connect the sensor’s VCC to 3.3V, GND to ground, and DATA to a GPIO pin.
Install the Adafruit_DHT library to read temperature and humidity data.
Python Code Example:

import Adafruit_DHT

sensor = Adafruit_DHT.DHT11
pin = 4  # GPIO pin connected to the sensor

humidity, temperature = Adafruit_DHT.read_retry(sensor, pin)
print(f"Temperature: {temperature}C, Humidity: {humidity}%")

2. Interfacing a PIR Motion Sensor with Raspberry Pi:
Connect VCC to 5V, GND to ground, and OUT to a GPIO pin.
Use RPi.GPIO to detect motion and trigger an action.
Python Code Example:

import RPi.GPIO as GPIO
import time

PIR_PIN = 17
GPIO.setmode(GPIO.BCM)
GPIO.setup(PIR_PIN, GPIO.IN)

while True:
    if GPIO.input(PIR_PIN):
        print("Motion Detected!")
    time.sleep(1)

3. Interfacing a Relay Module with Raspberry Pi:
Connect VCC to 5V, GND to ground, and IN to a GPIO pin.
Use Python to switch the relay ON and OFF.
Python Code Example:

import RPi.GPIO as GPIO
import time

RELAY_PIN = 18
GPIO.setmode(GPIO.BCM)
GPIO.setup(RELAY_PIN, GPIO.OUT)

GPIO.output(RELAY_PIN, GPIO.HIGH)  # Turn relay ON
time.sleep(2)
GPIO.output(RELAY_PIN, GPIO.LOW)   # Turn relay OFF
GPIO.cleanup()

4. Interfacing a Servo Motor with Raspberry Pi:
Connect the servo’s power and ground, and control pin to a GPIO pin.
Use PWM (Pulse Width Modulation) to control the servo position.
Python Code Example:

import RPi.GPIO as GPIO
import time

SERVO_PIN = 12
GPIO.setmode(GPIO.BCM)
GPIO.setup(SERVO_PIN, GPIO.OUT)

pwm = GPIO.PWM(SERVO_PIN, 50)
pwm.start(7.5)

pwm.ChangeDutyCycle(2.5)  # Move servo to 0 degrees
time.sleep(1)
pwm.ChangeDutyCycle(12.5) # Move servo to 180 degrees
time.sleep(1)
pwm.stop()
GPIO.cleanup()

5. Interfacing an Ultrasonic Sensor (HC-SR04) with Raspberry Pi:
Connect VCC to 5V, GND to ground, TRIG to a GPIO pin, and ECHO to another GPIO pin.
Use Python to calculate the distance based on the time delay between the signal sent and received.
Python Code Example:

import RPi.GPIO as GPIO
import time

TRIG = 23
ECHO = 24

GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)

GPIO.output(TRIG, True)
time.sleep(0.00001)
GPIO.output(TRIG, False)

while GPIO.input(ECHO) == 0:
    start_time = time.time()
while GPIO.input(ECHO) == 1:
    end_time = time.time()

distance = ((end_time - start_time) * 34300) / 2
print(f"Distance: {distance} cm")
GPIO.cleanup()

Resources Used in this Skill:
Hardware: Raspberry Pi (any model with GPIO support), DHT11/DHT22 sensor, PIR motion sensor, relay module, servo motor, ultrasonic sensor, jumper wires, breadboard, resistors
Software & Libraries: Raspbian OS, Python, RPi.GPIO, Adafruit_DHT
Development Tools: Thonny Python IDE, Terminal for running scripts
